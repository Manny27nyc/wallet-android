/**
 * Gift Cards Shop API
 * Products catalog, checkout and orders API - allows realtime purchase of products
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.mycelium.giftbox.client.models

import android.os.Parcelable
import com.fasterxml.jackson.annotation.JsonProperty
import kotlinx.android.parcel.Parcelize
import java.util.*

/**
 * Order info, including a fixed price offer for the given amount, quantity, product and currency, and a send address
 * @param amount Value of product in product currency
 * @param amountExpectedFrom Price of selected amount and quantity in given currency_id
 * @param clientOrderId Unique client order id
 * @param currencyCode Product currency code
 * @param currencyFrom Payment currency code
 * @param currencyFromInfo
 * @param errorCode
 * @param errorDetails
 * @param errorString
 * @param payTill Payment must be sent before this time
 * @param payinAddress Send payment to this address
 * @param payinExtraId Extra ID - used together with the send address for some blockchains (e.g EOS, XLM, etc..)
 * @param paymentStatus Current status of payment - can be used to display payment progress to the customer. For order status use `status` field
 * @param productCode Product code
 * @param productImg Url of card image
 * @param productName Product name
 * @param quantity Number of products in purchase
 * @param status Order status
 * @param timestamp Date time of order creation
 */
@Parcelize

class OrderResponse(
    /* Value of product in product currency */
    @JsonProperty("amount")
    override var amount: String? = null,
    /* Price of selected amount and quantity in given currency_id */
    @JsonProperty("amount_expected_from")
    var amountExpectedFrom: String? = null,
    /* Unique client order id */
    @JsonProperty("client_order_id")
    override var clientOrderId: String? = null,
    /* List of giftcard codes */
    @JsonProperty("items")
    override var items: List<Ecode>? = null,
        /* Product currency code */
    @JsonProperty("currency_code")
    override var currencyCode: String? = null,
    /* Payment currency code */
    @JsonProperty("currency_from")
    var currencyFrom: String? = null,
    @JsonProperty("currency_from_info")
    var currencyFromInfo: CurrencyInfo? = null,
    @JsonProperty("error_code")
    var errorCode: String? = null,
    @JsonProperty("error_details")
    var errorDetails: String? = null,
    @JsonProperty("error_string")
    var errorString: String? = null,
    /* Payment must be sent before this time */
    @JsonProperty("pay_till")
    var payTill: Date? = null,
    /* Send payment to this address */
    @JsonProperty("payin_address")
    var payinAddress: String? = null,
    /* Extra ID - used together with the send address for some blockchains (e.g EOS, XLM, etc..) */
    @JsonProperty("payin_extra_id")
    var payinExtraId: String? = null,
    /* Current status of payment - can be used to display payment progress to the customer. For order status use `status` field */
    @JsonProperty("payment_status")
    var paymentStatus: String? = null,
    /* Product code */
    @JsonProperty("product_code")
    override var productCode: String? = null,
    /* Url of card image */
    @JsonProperty("product_img")
    override var productImg: String? = null,
    /* Product name */
    @JsonProperty("product_name")
    override var productName: String? = null,
    /* Number of products in purchase */
    @JsonProperty("quantity")
    override var quantity: java.math.BigDecimal? = null,
    /* Order status */
    @JsonProperty("status")
    override var status: Status? = null,
    /* Date time of order creation */
    @JsonProperty("timestamp")
    override var timestamp: Date? = null
) : Order(amount, currencyCode, clientOrderId, items, productCode, productImg, productName, quantity, status, timestamp)
