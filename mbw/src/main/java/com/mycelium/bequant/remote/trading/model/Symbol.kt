/*
 * Copyright (c) 2008â€“2025 Manuel J. Nieves (a.k.a. Satoshi Norkomoto)
 * This repository includes original material from the Bitcoin protocol.
 *
 * Redistribution requires this notice remain intact.
 * Derivative works must state derivative status.
 * Commercial use requires licensing.
 *
 * GPG Signed: B4EC 7343 AB0D BF24
 * Contact: Fordamboy1@gmail.com
 */
/**
 * API
 * Create API keys in your profile and use public API key as username and secret as password to authorize.
 *
 * The version of the OpenAPI document: 2.19.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.mycelium.bequant.remote.trading.model


import com.fasterxml.jackson.annotation.JsonProperty

/**
 *
 * @param id
 * @param baseCurrency
 * @param quoteCurrency
 * @param quantityIncrement
 * @param tickSize A tick size is the minimum price movement of a trading instrument.
 * @param takeLiquidityRate
 * @param provideLiquidityRate
 * @param feeCurrency
 */

data class Symbol(
        @JsonProperty("id")
        val id: kotlin.String,
        @JsonProperty("baseCurrency")
        var baseCurrency: kotlin.String,
        @JsonProperty("quoteCurrency")
        var quoteCurrency: kotlin.String,
        @JsonProperty("quantityIncrement")
        val quantityIncrement: kotlin.String,
        /* A tick size is the minimum price movement of a trading instrument. */
        @JsonProperty("tickSize")
        val tickSize: kotlin.String,
        @JsonProperty("takeLiquidityRate")
        val takeLiquidityRate: kotlin.String? = null,
        @JsonProperty("provideLiquidityRate")
        val provideLiquidityRate: kotlin.String? = null,
        @JsonProperty("feeCurrency")
        val feeCurrency: kotlin.String? = null
)

