import com.mycelium.wapi.wallet.coins.Balance;
import com.mycelium.wapi.wallet.coins.CryptoCurrency;
import java.math.BigInteger;
import java.util.UUID;
import kotlin.collections.List;
import com.mrd.bitlib.model.AddressType;
import kotlin.collections.Map;
import com.mrd.bitlib.crypto.BipDerivationType;
import com.mycelium.wapi.wallet.AccountIndexesContext;

CREATE TABLE IF NOT EXISTS BTCVContext(
    uuid TEXT AS UUID PRIMARY KEY NOT NULL,
    accountIndex INTEGER AS Int NOT NULL,
    indexContexts TEXT AS Map<BipDerivationType, AccountIndexesContext>,
    lastDiscovery INTEGER,
    accountType INTEGER AS Int,
    accountSubId INTEGER AS Int,
    addressType TEXT AS AddressType,
    FOREIGN KEY (uuid)
        REFERENCES AccountContext (uuid)
        ON DELETE CASCADE
);

selectAllBTCVContexts:
SELECT ec.uuid, c.currency, c.accountName, c.archived, c.balance, c.blockHeight, ec.accountIndex,
    ec.indexContexts, ec.lastDiscovery, ec.accountType, ec.accountSubId, ec.addressType
FROM BTCVContext AS ec
  INNER JOIN AccountContext AS c
  ON ec.uuid = c.uuid;

selectBTCVContextByUUID:
SELECT ec.uuid, c.currency, c.accountName, c.archived, c.balance, c.blockHeight, ec.accountIndex,
    ec.indexContexts, ec.lastDiscovery, ec.accountType, ec.accountSubId, ec.addressType
FROM BTCVContext AS ec
    INNER JOIN AccountContext AS c
    ON ec.uuid = c.uuid
        WHERE ec.uuid = (?);

insert:
INSERT INTO BTCVContext(uuid, accountIndex)
VALUES (?, ?);

insertFullObject:
INSERT INTO BTCVContext(uuid, accountIndex)
VALUES ?;

update:
UPDATE BTCVContext
SET indexContexts = (?), lastDiscovery=(?), accountType =(?), accountSubId = (?), addressType = (?)
    WHERE uuid = (?);

delete:
DELETE FROM BTCVContext
WHERE uuid = (?);