import com.mrd.bitlib.util.Sha256Hash;
import java.util.UUID;

CREATE TABLE IF NOT EXISTS BTCVTransaction(
        id BLOB AS Sha256Hash,
        accountId TEXT AS UUID,
        hash BLOB AS Sha256Hash NOT NULL,
        blockNumber INTEGER AS Int NOT NULL,
        timestamp INTEGER AS Int NOT NULL,
        binary BLOB NOT NULL,
        PRIMARY KEY (id, accountId)
);

selectBTCVTransactions:
SELECT b.id, b.hash, b.blockNumber, b.timestamp, b.binary
FROM BTCVTransaction AS b
    WHERE b.accountId = (:accountId) ORDER BY b.blockNumber DESC, b.timestamp DESC
    LIMIT (:limit) OFFSET (:offset);

selectBTCVTransactionById:
SELECT b.id, b.hash, b.blockNumber, b.timestamp, b.binary
FROM BTCVTransaction AS b
       WHERE b.id = (?) AND b.accountId = (?);

selectBTCVTransactionsSince:
SELECT b.id, b.hash, b.blockNumber, b.timestamp, b.binary
FROM BTCVTransaction AS b
    WHERE b.accountId = (?) AND b.timestamp >= (?) ORDER BY b.blockNumber DESC, b.timestamp DESC;

selectBTCVYoungTransactions:
SELECT b.id, b.hash, b.blockNumber, b.timestamp, b.binary
FROM BTCVTransaction AS b
WHERE b.accountId = (?) AND b.blockNumber >= (:minBlockNumber) OR b.blockNumber = -1;

selectBTCVUnconfirmedTransactions:
SELECT b.id, b.hash, b.blockNumber, b.timestamp, b.binary
FROM BTCVTransaction AS b
WHERE b.accountId = (?) AND b.blockNumber = 2147483647;

insertTransaction:
INSERT OR REPLACE INTO BTCVTransaction(id, hash, accountId, blockNumber, timestamp, binary)
VALUES (?, ?, ?, ?, ?, ?);

deleteTransaction:
DELETE FROM BTCVTransaction
WHERE hash = (?) AND accountId = (?);

deleteTransactions:
DELETE FROM BTCVTransaction
WHERE accountId = (?);
